const XLSX = require('xlsx');
const path = require('path');

// Comprehensive test cases for all CRM modules
const testCases = [

  // ============================================
  // ACCOUNTS MODULE TEST CASES (TC-ACC-001 to TC-ACC-050)
  // ============================================

  // Accounts API - GET Operations
  {
    id: 'TC-ACC-001',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Fetch all accounts successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Valid company ID and user authentication',
    testSteps: '1. Send GET request to /api/accounts\n2. Include companyId parameter\n3. Verify response status',
    expectedResult: 'Returns 200 status with array of accounts and total count',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'API Testing'
  },
  {
    id: 'TC-ACC-002',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Search accounts by name',
    testType: 'API',
    priority: 'High',
    precondition: 'Accounts exist in database',
    testSteps: '1. Send GET request with search parameter\n2. Verify filtered results\n3. Check search accuracy',
    expectedResult: 'Returns only accounts matching search term in name, city, or website',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Search Functionality'
  },
  {
    id: 'TC-ACC-003',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Filter accounts by industry',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Accounts with different industries exist',
    testSteps: '1. Send GET request with industry filter\n2. Verify only accounts from specified industry returned',
    expectedResult: 'Returns filtered accounts matching industry criteria',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-ACC-004',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Filter accounts by city',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Accounts from different cities exist',
    testSteps: '1. Send GET request with city filter\n2. Verify filtering works correctly',
    expectedResult: 'Returns accounts only from specified city',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-ACC-005',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Pagination works correctly',
    testType: 'API',
    priority: 'High',
    precondition: 'More than 50 accounts exist',
    testSteps: '1. Send request with page and limit parameters\n2. Verify correct page of results returned\n3. Check totalPages calculation',
    expectedResult: 'Returns correct page of results with accurate pagination metadata',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Pagination'
  },
  {
    id: 'TC-ACC-006',
    module: 'Accounts',
    subModule: 'API - GET',
    testCaseName: 'Account includes owner information',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Accounts have assigned owners',
    testSteps: '1. Fetch accounts\n2. Verify owner object is populated\n3. Check owner fields (id, full_name, email)',
    expectedResult: 'Each account includes complete owner information',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Integrity'
  },

  // Accounts API - POST Operations
  {
    id: 'TC-ACC-007',
    module: 'Accounts',
    subModule: 'API - POST',
    testCaseName: 'Create new account successfully',
    testType: 'API',
    priority: 'Critical',
    precondition: 'Valid account data prepared',
    testSteps: '1. Send POST request with account data\n2. Include companyId and userId\n3. Verify account created',
    expectedResult: 'Returns 201 status with created account object including ID',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-008',
    module: 'Accounts',
    subModule: 'API - POST',
    testCaseName: 'Reject account creation without company ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Account data without companyId',
    testSteps: '1. Send POST request without companyId\n2. Verify error response',
    expectedResult: 'Returns 400 error with message "Company ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'Validation'
  },
  {
    id: 'TC-ACC-009',
    module: 'Accounts',
    subModule: 'API - POST',
    testCaseName: 'Reject account creation without account name',
    testType: 'API',
    priority: 'High',
    precondition: 'Account data without account_name',
    testSteps: '1. Send POST request without account name\n2. Verify validation error',
    expectedResult: 'Returns 400 error with message "Account name is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'Validation'
  },
  {
    id: 'TC-ACC-010',
    module: 'Accounts',
    subModule: 'API - POST',
    testCaseName: 'Prevent duplicate account creation',
    testType: 'API',
    priority: 'High',
    precondition: 'Account with same name and city exists',
    testSteps: '1. Attempt to create account with duplicate name and city\n2. Verify duplicate detection',
    expectedResult: 'Returns 409 error with message indicating duplicate account',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },

  // Accounts API - PUT Operations
  {
    id: 'TC-ACC-011',
    module: 'Accounts',
    subModule: 'API - PUT',
    testCaseName: 'Update account successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Account exists in database',
    testSteps: '1. Send PUT request with updated data\n2. Include account ID\n3. Verify update successful',
    expectedResult: 'Returns 200 with updated account object and modified_date updated',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-012',
    module: 'Accounts',
    subModule: 'API - PUT',
    testCaseName: 'Reject update without account ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Update data prepared',
    testSteps: '1. Send PUT request without account ID\n2. Verify error response',
    expectedResult: 'Returns 400 error with message "Account ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },

  // Accounts API - DELETE Operations
  {
    id: 'TC-ACC-013',
    module: 'Accounts',
    subModule: 'API - DELETE',
    testCaseName: 'Delete account successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Account exists and can be deleted',
    testSteps: '1. Send DELETE request with account ID\n2. Verify deletion successful\n3. Confirm account no longer exists',
    expectedResult: 'Returns 200 with success message and account is removed',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-014',
    module: 'Accounts',
    subModule: 'API - DELETE',
    testCaseName: 'Reject delete without account ID',
    testType: 'API',
    priority: 'High',
    precondition: 'DELETE request prepared',
    testSteps: '1. Send DELETE request without ID parameter\n2. Verify error response',
    expectedResult: 'Returns 400 error with message "Account ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/accounts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },

  // Accounts UI - Component Tests
  {
    id: 'TC-ACC-015',
    module: 'Accounts',
    subModule: 'UI - Component',
    testCaseName: 'Accounts page loads and displays data',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User is authenticated',
    testSteps: '1. Navigate to accounts page\n2. Wait for data to load\n3. Verify accounts list displayed',
    expectedResult: 'Accounts page loads with list of accounts and statistics',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'UI Rendering'
  },
  {
    id: 'TC-ACC-016',
    module: 'Accounts',
    subModule: 'UI - Component',
    testCaseName: 'Account statistics calculated correctly',
    testType: 'UI',
    priority: 'High',
    precondition: 'Accounts data loaded',
    testSteps: '1. View accounts page\n2. Check statistics cards\n3. Verify calculations (total, active, new this month, regions)',
    expectedResult: 'Statistics show correct counts and calculations',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Business Logic'
  },
  {
    id: 'TC-ACC-017',
    module: 'Accounts',
    subModule: 'UI - Search',
    testCaseName: 'Search accounts by keyword',
    testType: 'UI',
    priority: 'High',
    precondition: 'Multiple accounts exist',
    testSteps: '1. Enter search term in search box\n2. Verify filtered results\n3. Clear search and verify all accounts shown',
    expectedResult: 'Search filters accounts in real-time, showing only matching results',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Search Functionality'
  },
  {
    id: 'TC-ACC-018',
    module: 'Accounts',
    subModule: 'UI - Filters',
    testCaseName: 'Filter accounts by country',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Accounts from different countries exist',
    testSteps: '1. Select country from dropdown\n2. Verify filtered results\n3. Reset filter',
    expectedResult: 'Only accounts from selected country are displayed',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-ACC-019',
    module: 'Accounts',
    subModule: 'UI - Filters',
    testCaseName: 'Filter accounts by industry',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Accounts from different industries exist',
    testSteps: '1. Select industry from dropdown\n2. Verify accounts filtered correctly',
    expectedResult: 'Only accounts from selected industry shown',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-ACC-020',
    module: 'Accounts',
    subModule: 'UI - Filters',
    testCaseName: 'Filter accounts by status',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Both active and inactive accounts exist',
    testSteps: '1. Select status filter\n2. Verify correct accounts displayed',
    expectedResult: 'Accounts filtered by active/inactive status',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-ACC-021',
    module: 'Accounts',
    subModule: 'UI - CRUD',
    testCaseName: 'Create new account via UI',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User on accounts page',
    testSteps: '1. Click "Add Account" button\n2. Fill in account form\n3. Submit form\n4. Verify account created and appears in list',
    expectedResult: 'New account created successfully and appears in accounts list',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-022',
    module: 'Accounts',
    subModule: 'UI - CRUD',
    testCaseName: 'Edit existing account',
    testType: 'UI',
    priority: 'High',
    precondition: 'Account exists in list',
    testSteps: '1. Click edit icon on account row\n2. Modify account data\n3. Save changes\n4. Verify updates reflected',
    expectedResult: 'Account updated successfully with new data visible',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-023',
    module: 'Accounts',
    subModule: 'UI - CRUD',
    testCaseName: 'Delete account with confirmation',
    testType: 'UI',
    priority: 'High',
    precondition: 'Account exists and can be deleted',
    testSteps: '1. Click delete icon\n2. Confirm deletion\n3. Verify account removed from list',
    expectedResult: 'Account deleted after confirmation and removed from view',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-ACC-024',
    module: 'Accounts',
    subModule: 'UI - Navigation',
    testCaseName: 'Navigate to add account page',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'User on accounts page',
    testSteps: '1. Click "Add Account" button\n2. Verify navigation to add account page',
    expectedResult: 'User redirected to /accounts/add page',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Navigation'
  },
  {
    id: 'TC-ACC-025',
    module: 'Accounts',
    subModule: 'UI - Navigation',
    testCaseName: 'Navigate to edit account page',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Account exists',
    testSteps: '1. Click edit icon on account\n2. Verify navigation to edit page with account ID',
    expectedResult: 'User redirected to /accounts/edit/[id] page',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Navigation'
  },
  {
    id: 'TC-ACC-026',
    module: 'Accounts',
    subModule: 'UI - Export',
    testCaseName: 'Export accounts to Excel',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Accounts exist',
    testSteps: '1. Click "Export to Excel" button\n2. Verify file download\n3. Open file and verify data',
    expectedResult: 'Excel file downloads with all account data correctly formatted',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/accounts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Export Functionality'
  },
  {
    id: 'TC-ACC-027',
    module: 'Accounts',
    subModule: 'UI - Import',
    testCaseName: 'Import accounts from Excel file',
    testType: 'UI',
    priority: 'High',
    precondition: 'Valid Excel file prepared',
    testSteps: '1. Click import button\n2. Select Excel file\n3. Review import preview\n4. Confirm import\n5. Verify accounts created',
    expectedResult: 'Accounts imported successfully from Excel file',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/simple-file-import.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Import Functionality'
  },
  {
    id: 'TC-ACC-028',
    module: 'Accounts',
    subModule: 'UI - Import',
    testCaseName: 'Import validation - Reject invalid file format',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Non-Excel file prepared',
    testSteps: '1. Attempt to import non-Excel file\n2. Verify error message shown',
    expectedResult: 'Error message displayed indicating invalid file format',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/simple-file-import.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Validation'
  },
  {
    id: 'TC-ACC-029',
    module: 'Accounts',
    subModule: 'UI - Import',
    testCaseName: 'Import validation - Handle duplicate accounts',
    testType: 'UI',
    priority: 'High',
    precondition: 'Import file contains duplicate account',
    testSteps: '1. Import file with duplicate\n2. Verify duplicate detection\n3. Check handling (skip or update)',
    expectedResult: 'System detects duplicates and handles appropriately',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/simple-file-import.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },
  {
    id: 'TC-ACC-030',
    module: 'Accounts',
    subModule: 'UI - Import',
    testCaseName: 'Import shows progress indicator',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Large import file prepared',
    testSteps: '1. Start import of large file\n2. Observe progress indicator\n3. Verify completion notification',
    expectedResult: 'Progress indicator shows during import with completion message',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/simple-file-import.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Experience'
  },

  // ============================================
  // CONTACTS MODULE TEST CASES (TC-CON-001 to TC-CON-050)
  // ============================================

  // Contacts API - GET Operations
  {
    id: 'TC-CON-001',
    module: 'Contacts',
    subModule: 'API - GET',
    testCaseName: 'Fetch all contacts successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Valid company ID provided',
    testSteps: '1. Send GET request to /api/contacts\n2. Include companyId parameter\n3. Verify response',
    expectedResult: 'Returns 200 with contacts array and total count',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'API Testing'
  },
  {
    id: 'TC-CON-002',
    module: 'Contacts',
    subModule: 'API - GET',
    testCaseName: 'Filter contacts by company ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Multiple companies with contacts exist',
    testSteps: '1. Send request with specific companyId\n2. Verify only contacts from that company returned',
    expectedResult: 'Returns contacts filtered by company ID',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'Security'
  },
  {
    id: 'TC-CON-003',
    module: 'Contacts',
    subModule: 'API - GET',
    testCaseName: 'Filter contacts by account ID',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Contacts linked to accounts',
    testSteps: '1. Send request with accountId parameter\n2. Verify only contacts from that account returned',
    expectedResult: 'Returns contacts filtered by account ID',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-CON-004',
    module: 'Contacts',
    subModule: 'API - GET',
    testCaseName: 'Contacts include account details',
    testType: 'API',
    priority: 'High',
    precondition: 'Contacts linked to accounts',
    testSteps: '1. Fetch contacts\n2. Verify account object populated\n3. Check account fields',
    expectedResult: 'Each contact includes complete account information when linked',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Data Integrity'
  },
  {
    id: 'TC-CON-005',
    module: 'Contacts',
    subModule: 'API - GET',
    testCaseName: 'Contacts ordered by created date',
    testType: 'API',
    priority: 'Low',
    precondition: 'Multiple contacts exist',
    testSteps: '1. Fetch contacts\n2. Verify order is descending by created_at',
    expectedResult: 'Newest contacts appear first in the list',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Low',
    category: 'Sorting'
  },

  // Contacts API - POST Operations
  {
    id: 'TC-CON-006',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Create new contact successfully',
    testType: 'API',
    priority: 'Critical',
    precondition: 'Valid contact data prepared',
    testSteps: '1. Send POST request with contact data\n2. Include all required fields\n3. Verify creation',
    expectedResult: 'Returns 201 with created contact object',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-007',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Validate required field - first_name',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact data without first_name',
    testSteps: '1. Send POST without first_name\n2. Verify validation error',
    expectedResult: 'Returns 400 with error "first_name is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-008',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Validate required field - last_name',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact data without last_name',
    testSteps: '1. Send POST without last_name\n2. Verify validation error',
    expectedResult: 'Returns 400 with error "last_name is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-009',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Validate required field - email_primary',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact data without email',
    testSteps: '1. Send POST without email_primary\n2. Verify validation error',
    expectedResult: 'Returns 400 with error "email_primary is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-010',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Validate required field - phone_mobile',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact data without phone',
    testSteps: '1. Send POST without phone_mobile\n2. Verify validation error',
    expectedResult: 'Returns 400 with error "phone_mobile is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-011',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Validate required field - lifecycle_stage',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact data without lifecycle_stage',
    testSteps: '1. Send POST without lifecycle_stage\n2. Verify validation error',
    expectedResult: 'Returns 400 with error "lifecycle_stage is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-012',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Reject creation without company ID',
    testType: 'API',
    priority: 'Critical',
    precondition: 'Contact data without companyId',
    testSteps: '1. Send POST without companyId\n2. Verify error response',
    expectedResult: 'Returns 400 with error "Company ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'Security'
  },
  {
    id: 'TC-CON-013',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Link contact to account during creation',
    testType: 'API',
    priority: 'High',
    precondition: 'Valid account ID provided',
    testSteps: '1. Create contact with accountId\n2. Verify contact linked to account\n3. Check company_name auto-populated',
    expectedResult: 'Contact created with account link and company_name from account',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },
  {
    id: 'TC-CON-014',
    module: 'Contacts',
    subModule: 'API - POST',
    testCaseName: 'Clean empty strings to null values',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Contact data with empty strings',
    testSteps: '1. Send contact data with empty string fields\n2. Verify stored as null in database',
    expectedResult: 'Empty strings converted to null before storage',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Processing'
  },

  // Contacts API - PUT Operations
  {
    id: 'TC-CON-015',
    module: 'Contacts',
    subModule: 'API - PUT',
    testCaseName: 'Update contact successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact exists',
    testSteps: '1. Send PUT with updated data\n2. Include contact ID\n3. Verify update',
    expectedResult: 'Returns 200 with updated contact and modified_date updated',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-016',
    module: 'Contacts',
    subModule: 'API - PUT',
    testCaseName: 'Reject update without contact ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Update data prepared',
    testSteps: '1. Send PUT without contact ID\n2. Verify error response',
    expectedResult: 'Returns 400 with error "Contact ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-CON-017',
    module: 'Contacts',
    subModule: 'API - PUT',
    testCaseName: 'Update contact account linkage',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Contact and new account exist',
    testSteps: '1. Update contact with new accountId\n2. Verify link updated\n3. Check company_name updated',
    expectedResult: 'Contact linked to new account with company_name updated',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Business Logic'
  },

  // Contacts API - DELETE Operations
  {
    id: 'TC-CON-018',
    module: 'Contacts',
    subModule: 'API - DELETE',
    testCaseName: 'Delete contact successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Contact exists and can be deleted',
    testSteps: '1. Send DELETE with contact ID\n2. Verify deletion\n3. Confirm contact removed',
    expectedResult: 'Returns 200 with success message and contact deleted',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-019',
    module: 'Contacts',
    subModule: 'API - DELETE',
    testCaseName: 'Reject delete without contact ID',
    testType: 'API',
    priority: 'High',
    precondition: 'DELETE request prepared',
    testSteps: '1. Send DELETE without ID\n2. Verify error response',
    expectedResult: 'Returns 400 with error "Contact ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/contacts/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },

  // Contacts UI - Component Tests
  {
    id: 'TC-CON-020',
    module: 'Contacts',
    subModule: 'UI - Component',
    testCaseName: 'Contacts page loads and displays data',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User authenticated',
    testSteps: '1. Navigate to contacts page\n2. Wait for loading\n3. Verify contacts displayed',
    expectedResult: 'Contacts page loads with list and statistics',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'UI Rendering'
  },
  {
    id: 'TC-CON-021',
    module: 'Contacts',
    subModule: 'UI - Component',
    testCaseName: 'Contact statistics calculated correctly',
    testType: 'UI',
    priority: 'High',
    precondition: 'Contacts data loaded',
    testSteps: '1. View contacts page\n2. Check statistics\n3. Verify calculations (total, active, leads, customers)',
    expectedResult: 'Statistics show correct counts',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Business Logic'
  },
  {
    id: 'TC-CON-022',
    module: 'Contacts',
    subModule: 'UI - Search',
    testCaseName: 'Search contacts by name',
    testType: 'UI',
    priority: 'High',
    precondition: 'Multiple contacts exist',
    testSteps: '1. Enter search term\n2. Verify filtered results\n3. Clear search',
    expectedResult: 'Search filters contacts in real-time by name, email, or company',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Search Functionality'
  },
  {
    id: 'TC-CON-023',
    module: 'Contacts',
    subModule: 'UI - CRUD',
    testCaseName: 'Create new contact via UI',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User on contacts page',
    testSteps: '1. Click "Add Contact"\n2. Fill form with required fields\n3. Submit\n4. Verify contact created',
    expectedResult: 'New contact created and appears in list',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-024',
    module: 'Contacts',
    subModule: 'UI - CRUD',
    testCaseName: 'Edit existing contact',
    testType: 'UI',
    priority: 'High',
    precondition: 'Contact exists',
    testSteps: '1. Click edit icon\n2. Modify contact data\n3. Save\n4. Verify updates',
    expectedResult: 'Contact updated successfully',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-025',
    module: 'Contacts',
    subModule: 'UI - CRUD',
    testCaseName: 'Delete contact with confirmation',
    testType: 'UI',
    priority: 'High',
    precondition: 'Contact can be deleted',
    testSteps: '1. Click delete\n2. Confirm\n3. Verify removal',
    expectedResult: 'Contact deleted after confirmation',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-CON-026',
    module: 'Contacts',
    subModule: 'UI - Display',
    testCaseName: 'Display contact lifecycle stage badge',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Contacts with various lifecycle stages',
    testSteps: '1. View contacts list\n2. Verify lifecycle stage badges displayed\n3. Check color coding',
    expectedResult: 'Lifecycle stage shown as colored badge for each contact',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'UI Display'
  },
  {
    id: 'TC-CON-027',
    module: 'Contacts',
    subModule: 'UI - Display',
    testCaseName: 'Display contact status badge',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Contacts with different statuses',
    testSteps: '1. View contacts\n2. Verify status badges\n3. Check active/inactive indication',
    expectedResult: 'Status displayed with appropriate badge color',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'UI Display'
  },
  {
    id: 'TC-CON-028',
    module: 'Contacts',
    subModule: 'UI - Actions',
    testCaseName: 'Click phone icon to initiate call',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Contact has phone number',
    testSteps: '1. Click phone icon on contact\n2. Verify tel: link opened',
    expectedResult: 'Phone dialer opens with contact number',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },
  {
    id: 'TC-CON-029',
    module: 'Contacts',
    subModule: 'UI - Actions',
    testCaseName: 'Click email icon to send email',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Contact has email',
    testSteps: '1. Click email icon\n2. Verify mailto: link opened',
    expectedResult: 'Email client opens with contact email pre-filled',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },
  {
    id: 'TC-CON-030',
    module: 'Contacts',
    subModule: 'UI - Actions',
    testCaseName: 'Click WhatsApp icon to chat',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Contact has WhatsApp number',
    testSteps: '1. Click WhatsApp icon\n2. Verify WhatsApp opened',
    expectedResult: 'WhatsApp opens with contact chat',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/contacts-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },

  // ============================================
  // PRODUCTS MODULE TEST CASES (TC-PRD-001 to TC-PRD-050)
  // ============================================

  // Products API - GET Operations
  {
    id: 'TC-PRD-001',
    module: 'Products',
    subModule: 'API - GET',
    testCaseName: 'Fetch all products successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Products exist in database',
    testSteps: '1. Send GET request to /api/products\n2. Verify response status\n3. Check data structure',
    expectedResult: 'Returns 200 with array of products ordered by created_at descending',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'API Testing'
  },
  {
    id: 'TC-PRD-002',
    module: 'Products',
    subModule: 'API - GET',
    testCaseName: 'Products ordered by creation date',
    testType: 'API',
    priority: 'Low',
    precondition: 'Multiple products exist',
    testSteps: '1. Fetch products\n2. Verify order is descending by created_at',
    expectedResult: 'Newest products appear first',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Low',
    category: 'Sorting'
  },
  {
    id: 'TC-PRD-003',
    module: 'Products',
    subModule: 'API - GET',
    testCaseName: 'Handle empty products table',
    testType: 'API',
    priority: 'Medium',
    precondition: 'No products in database',
    testSteps: '1. Fetch products from empty table\n2. Verify response',
    expectedResult: 'Returns 200 with empty array []',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Edge Cases'
  },

  // Products API - POST Operations
  {
    id: 'TC-PRD-004',
    module: 'Products',
    subModule: 'API - POST',
    testCaseName: 'Create new product successfully',
    testType: 'API',
    priority: 'Critical',
    precondition: 'Valid product data prepared',
    testSteps: '1. Send POST with product data\n2. Include companyId\n3. Verify creation',
    expectedResult: 'Returns 200 with created product object including ID',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-005',
    module: 'Products',
    subModule: 'API - POST',
    testCaseName: 'Reject creation without company ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Product data without companyId',
    testSteps: '1. Send POST without companyId\n2. Verify error response',
    expectedResult: 'Returns 400 with error "Company ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-PRD-006',
    module: 'Products',
    subModule: 'API - POST',
    testCaseName: 'Auto-set timestamps on creation',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Product creation request',
    testSteps: '1. Create product\n2. Verify created_at and updated_at set\n3. Check ISO format',
    expectedResult: 'Timestamps automatically set to current time in ISO format',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Processing'
  },
  {
    id: 'TC-PRD-007',
    module: 'Products',
    subModule: 'API - POST',
    testCaseName: 'Handle product image upload',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Product with image data',
    testSteps: '1. Create product with image\n2. Verify image stored\n3. Check image URL accessible',
    expectedResult: 'Product created with image stored and accessible',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'File Upload'
  },

  // Products API - PUT Operations
  {
    id: 'TC-PRD-008',
    module: 'Products',
    subModule: 'API - PUT',
    testCaseName: 'Update product successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Product exists',
    testSteps: '1. Send PUT with updated data\n2. Include product ID and companyId\n3. Verify update',
    expectedResult: 'Returns 200 with updated product and updated_at timestamp',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-009',
    module: 'Products',
    subModule: 'API - PUT',
    testCaseName: 'Reject update without product ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Update data prepared',
    testSteps: '1. Send PUT without product ID\n2. Verify error',
    expectedResult: 'Returns 400 with error "Product ID and Company ID are required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-PRD-010',
    module: 'Products',
    subModule: 'API - PUT',
    testCaseName: 'Reject update without company ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Update data without companyId',
    testSteps: '1. Send PUT without companyId\n2. Verify error',
    expectedResult: 'Returns 400 with error "Product ID and Company ID are required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Security'
  },
  {
    id: 'TC-PRD-011',
    module: 'Products',
    subModule: 'API - PUT',
    testCaseName: 'Update timestamp on product update',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Product being updated',
    testSteps: '1. Update product\n2. Verify updated_at changed\n3. Verify created_at unchanged',
    expectedResult: 'updated_at refreshed, created_at remains same',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Processing'
  },

  // Products API - DELETE Operations
  {
    id: 'TC-PRD-012',
    module: 'Products',
    subModule: 'API - DELETE',
    testCaseName: 'Delete product successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Product exists and can be deleted',
    testSteps: '1. Send DELETE with product ID and companyId\n2. Verify deletion\n3. Confirm removal',
    expectedResult: 'Returns 200 with success message and product deleted',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-013',
    module: 'Products',
    subModule: 'API - DELETE',
    testCaseName: 'Reject delete without product ID',
    testType: 'API',
    priority: 'High',
    precondition: 'DELETE request prepared',
    testSteps: '1. Send DELETE without ID\n2. Verify error',
    expectedResult: 'Returns 400 with error message',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/products/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },

  // Products UI - Component Tests
  {
    id: 'TC-PRD-014',
    module: 'Products',
    subModule: 'UI - Component',
    testCaseName: 'Products page loads and displays data',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User authenticated',
    testSteps: '1. Navigate to products page\n2. Wait for loading\n3. Verify products displayed',
    expectedResult: 'Products page loads with grid/list of products and statistics',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'UI Rendering'
  },
  {
    id: 'TC-PRD-015',
    module: 'Products',
    subModule: 'UI - Component',
    testCaseName: 'Product statistics calculated correctly',
    testType: 'UI',
    priority: 'High',
    precondition: 'Products data loaded',
    testSteps: '1. View products page\n2. Check statistics\n3. Verify calculations (total, active, categories, avg value)',
    expectedResult: 'Statistics show correct counts and calculations',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Business Logic'
  },
  {
    id: 'TC-PRD-016',
    module: 'Products',
    subModule: 'UI - Search',
    testCaseName: 'Search products by name',
    testType: 'UI',
    priority: 'High',
    precondition: 'Multiple products exist',
    testSteps: '1. Enter search term\n2. Verify filtered results\n3. Clear search',
    expectedResult: 'Search filters products by name in real-time',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Search Functionality'
  },
  {
    id: 'TC-PRD-017',
    module: 'Products',
    subModule: 'UI - Filters',
    testCaseName: 'Filter products by principal',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Products from different principals exist',
    testSteps: '1. Select principal from filter\n2. Verify filtered results\n3. Reset filter',
    expectedResult: 'Only products from selected principal displayed',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-PRD-018',
    module: 'Products',
    subModule: 'UI - Filters',
    testCaseName: 'Filter products by category',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Products from different categories exist',
    testSteps: '1. Select category filter\n2. Verify filtering\n3. Reset',
    expectedResult: 'Products filtered by selected category',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-PRD-019',
    module: 'Products',
    subModule: 'UI - Filters',
    testCaseName: 'Filter products by status',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Active and inactive products exist',
    testSteps: '1. Select status filter\n2. Verify correct products shown',
    expectedResult: 'Products filtered by active/inactive status',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-PRD-020',
    module: 'Products',
    subModule: 'UI - CRUD',
    testCaseName: 'Create new product via UI',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User on products page',
    testSteps: '1. Click "Add Product"\n2. Fill product form\n3. Submit\n4. Verify product created',
    expectedResult: 'New product created and appears in list',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-021',
    module: 'Products',
    subModule: 'UI - CRUD',
    testCaseName: 'Edit existing product',
    testType: 'UI',
    priority: 'High',
    precondition: 'Product exists',
    testSteps: '1. Click edit icon\n2. Modify product data\n3. Save\n4. Verify updates',
    expectedResult: 'Product updated successfully',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-022',
    module: 'Products',
    subModule: 'UI - CRUD',
    testCaseName: 'Delete product with confirmation',
    testType: 'UI',
    priority: 'High',
    precondition: 'Product can be deleted',
    testSteps: '1. Click delete\n2. Confirm deletion\n3. Verify removal',
    expectedResult: 'Product deleted after confirmation',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-PRD-023',
    module: 'Products',
    subModule: 'UI - Display',
    testCaseName: 'Display product image',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Products with images exist',
    testSteps: '1. View products list\n2. Verify product images displayed\n3. Check image quality',
    expectedResult: 'Product images displayed correctly in grid',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'UI Display'
  },
  {
    id: 'TC-PRD-024',
    module: 'Products',
    subModule: 'UI - Display',
    testCaseName: 'Zoom product image on click',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Product with image exists',
    testSteps: '1. Click on product image\n2. Verify modal opens with larger image\n3. Close modal',
    expectedResult: 'Image zooms in modal on click',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Experience'
  },
  {
    id: 'TC-PRD-025',
    module: 'Products',
    subModule: 'UI - Display',
    testCaseName: 'Display product pricing',
    testType: 'UI',
    priority: 'High',
    precondition: 'Products with pricing exist',
    testSteps: '1. View products\n2. Verify pricing displayed\n3. Check currency formatting',
    expectedResult: 'Product prices displayed with correct currency formatting',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'UI Display'
  },
  {
    id: 'TC-PRD-026',
    module: 'Products',
    subModule: 'UI - Display',
    testCaseName: 'Show expandable product description',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Products with long descriptions',
    testSteps: '1. View product with long description\n2. Click expand\n3. Verify full description shown',
    expectedResult: 'Long descriptions truncated with expand option',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Experience'
  },
  {
    id: 'TC-PRD-027',
    module: 'Products',
    subModule: 'UI - Import',
    testCaseName: 'Import products from Excel',
    testType: 'UI',
    priority: 'High',
    precondition: 'Valid Excel file prepared',
    testSteps: '1. Click import\n2. Select file\n3. Preview data\n4. Confirm import\n5. Verify products created',
    expectedResult: 'Products imported successfully from Excel',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-file-import.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Import Functionality'
  },
  {
    id: 'TC-PRD-028',
    module: 'Products',
    subModule: 'UI - Import',
    testCaseName: 'Import validation - Invalid file format',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Non-Excel file prepared',
    testSteps: '1. Attempt to import invalid file\n2. Verify error message',
    expectedResult: 'Error displayed for invalid file format',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-file-import.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Validation'
  },
  {
    id: 'TC-PRD-029',
    module: 'Products',
    subModule: 'UI - Import',
    testCaseName: 'Import shows progress indicator',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Large import file',
    testSteps: '1. Start import\n2. Observe progress\n3. Verify completion',
    expectedResult: 'Progress indicator shown during import',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-file-import.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Experience'
  },
  {
    id: 'TC-PRD-030',
    module: 'Products',
    subModule: 'UI - Export',
    testCaseName: 'Export products to Excel',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Products exist',
    testSteps: '1. Click export button\n2. Verify file download\n3. Open and verify data',
    expectedResult: 'Excel file downloads with all product data',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/products-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Export Functionality'
  },

  // ============================================
  // LEADS MODULE TEST CASES (TC-LED-001 to TC-LED-050)
  // ============================================

  // Leads API - GET Operations
  {
    id: 'TC-LED-001',
    module: 'Leads',
    subModule: 'API - GET',
    testCaseName: 'Fetch all leads successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Leads exist in database',
    testSteps: '1. Send GET request to /api/leads\n2. Verify response\n3. Check data structure',
    expectedResult: 'Returns 200 with array of leads ordered by created_at descending',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'API Testing'
  },
  {
    id: 'TC-LED-002',
    module: 'Leads',
    subModule: 'API - GET',
    testCaseName: 'Leads include merged custom fields',
    testType: 'API',
    priority: 'High',
    precondition: 'Leads with custom fields exist',
    testSteps: '1. Fetch leads\n2. Verify custom_fields merged into main object\n3. Check field accessibility',
    expectedResult: 'Custom fields merged into lead object for easy access',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Data Processing'
  },
  {
    id: 'TC-LED-003',
    module: 'Leads',
    subModule: 'API - GET',
    testCaseName: 'Handle empty leads table',
    testType: 'API',
    priority: 'Medium',
    precondition: 'No leads in database',
    testSteps: '1. Fetch leads from empty table\n2. Verify response',
    expectedResult: 'Returns 200 with empty array',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Edge Cases'
  },

  // Leads API - POST Operations
  {
    id: 'TC-LED-004',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Create new lead successfully',
    testType: 'API',
    priority: 'Critical',
    precondition: 'Valid lead data prepared',
    testSteps: '1. Send POST with lead data\n2. Include companyId\n3. Verify creation',
    expectedResult: 'Returns 200 with created lead object including ID',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-005',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Reject creation without company ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead data without companyId',
    testSteps: '1. Send POST without companyId\n2. Verify error',
    expectedResult: 'Returns 400 with error "Company ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Critical',
    category: 'Validation'
  },
  {
    id: 'TC-LED-006',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Separate standard and custom fields',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead with both standard and custom fields',
    testSteps: '1. Create lead with mixed fields\n2. Verify standard fields in columns\n3. Verify custom fields in custom_fields JSON',
    expectedResult: 'Standard fields stored in columns, others in custom_fields JSONB',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Data Processing'
  },
  {
    id: 'TC-LED-007',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Handle lead with products',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead data with selected_products',
    testSteps: '1. Create lead with products\n2. Verify product associations created\n3. Check product details stored',
    expectedResult: 'Lead created with product associations in lead_products table',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },
  {
    id: 'TC-LED-008',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Calculate total budget from products',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Lead with multiple products',
    testSteps: '1. Create lead with products having prices and quantities\n2. Verify budget calculated as sum of (price * quantity)',
    expectedResult: 'Total budget calculated correctly from all products',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Business Logic'
  },
  {
    id: 'TC-LED-009',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Auto-set timestamps on creation',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Lead creation request',
    testSteps: '1. Create lead\n2. Verify created_at and updated_at set',
    expectedResult: 'Timestamps set to current time in ISO format',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Processing'
  },
  {
    id: 'TC-LED-010',
    module: 'Leads',
    subModule: 'API - POST',
    testCaseName: 'Convert empty strings to null',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Lead data with empty strings',
    testSteps: '1. Send lead with empty string fields\n2. Verify stored as null',
    expectedResult: 'Empty strings converted to null before storage',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Processing'
  },

  // Leads API - PUT Operations
  {
    id: 'TC-LED-011',
    module: 'Leads',
    subModule: 'API - PUT',
    testCaseName: 'Update lead successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead exists',
    testSteps: '1. Send PUT with updated data\n2. Include lead ID\n3. Verify update',
    expectedResult: 'Returns 200 with updated lead and updated_at timestamp',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-012',
    module: 'Leads',
    subModule: 'API - PUT',
    testCaseName: 'Reject update without lead ID',
    testType: 'API',
    priority: 'High',
    precondition: 'Update data prepared',
    testSteps: '1. Send PUT without lead ID\n2. Verify error',
    expectedResult: 'Returns 400 with error "Lead ID is required"',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-LED-013',
    module: 'Leads',
    subModule: 'API - PUT',
    testCaseName: 'Update lead products',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead with products exists',
    testSteps: '1. Update lead with new products\n2. Verify old products removed\n3. Verify new products added',
    expectedResult: 'Lead products updated correctly',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },
  {
    id: 'TC-LED-014',
    module: 'Leads',
    subModule: 'API - PUT',
    testCaseName: 'Update lead status',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead exists',
    testSteps: '1. Update lead status\n2. Verify status changed\n3. Check workflow rules applied',
    expectedResult: 'Lead status updated with appropriate state changes',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },

  // Leads API - DELETE Operations
  {
    id: 'TC-LED-015',
    module: 'Leads',
    subModule: 'API - DELETE',
    testCaseName: 'Delete lead successfully',
    testType: 'API',
    priority: 'High',
    precondition: 'Lead exists and can be deleted',
    testSteps: '1. Send DELETE with lead ID\n2. Verify deletion\n3. Confirm removal',
    expectedResult: 'Returns 200 with success message and lead deleted',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-016',
    module: 'Leads',
    subModule: 'API - DELETE',
    testCaseName: 'Delete cascade - Remove lead products',
    testType: 'API',
    priority: 'Medium',
    precondition: 'Lead with products exists',
    testSteps: '1. Delete lead\n2. Verify associated products also removed',
    expectedResult: 'Lead and associated products deleted',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'app/api/leads/route.ts',
    executionTime: '',
    severity: 'Medium',
    category: 'Data Integrity'
  },

  // Leads UI - Component Tests
  {
    id: 'TC-LED-017',
    module: 'Leads',
    subModule: 'UI - Component',
    testCaseName: 'Leads page loads and displays data',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User authenticated',
    testSteps: '1. Navigate to leads page\n2. Wait for loading\n3. Verify leads displayed',
    expectedResult: 'Leads page loads with list of leads and statistics',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'UI Rendering'
  },
  {
    id: 'TC-LED-018',
    module: 'Leads',
    subModule: 'UI - Component',
    testCaseName: 'Lead statistics calculated correctly',
    testType: 'UI',
    priority: 'High',
    precondition: 'Leads data loaded',
    testSteps: '1. View leads page\n2. Check statistics cards\n3. Verify calculations (total, hot leads, converted, value)',
    expectedResult: 'Statistics show correct counts and totals',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Business Logic'
  },
  {
    id: 'TC-LED-019',
    module: 'Leads',
    subModule: 'UI - Search',
    testCaseName: 'Search leads by keyword',
    testType: 'UI',
    priority: 'High',
    precondition: 'Multiple leads exist',
    testSteps: '1. Enter search term\n2. Verify filtered results\n3. Clear search',
    expectedResult: 'Search filters leads by name, email, company, or product',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Search Functionality'
  },
  {
    id: 'TC-LED-020',
    module: 'Leads',
    subModule: 'UI - Filters',
    testCaseName: 'Filter leads by status',
    testType: 'UI',
    priority: 'High',
    precondition: 'Leads with different statuses',
    testSteps: '1. Select status filter\n2. Verify filtered results',
    expectedResult: 'Only leads with selected status displayed',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-LED-021',
    module: 'Leads',
    subModule: 'UI - Filters',
    testCaseName: 'Filter leads by priority',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Leads with different priorities',
    testSteps: '1. Select priority filter\n2. Verify filtering',
    expectedResult: 'Leads filtered by priority (High/Medium/Low)',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Filter Functionality'
  },
  {
    id: 'TC-LED-022',
    module: 'Leads',
    subModule: 'UI - CRUD',
    testCaseName: 'Create new lead via UI',
    testType: 'UI',
    priority: 'Critical',
    precondition: 'User on leads page',
    testSteps: '1. Click "Add Lead"\n2. Fill lead form\n3. Select products\n4. Submit\n5. Verify lead created',
    expectedResult: 'New lead created with products and appears in list',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Critical',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-023',
    module: 'Leads',
    subModule: 'UI - CRUD',
    testCaseName: 'Edit existing lead',
    testType: 'UI',
    priority: 'High',
    precondition: 'Lead exists',
    testSteps: '1. Click edit icon\n2. Modify lead data\n3. Update products\n4. Save\n5. Verify updates',
    expectedResult: 'Lead updated successfully with new data',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-024',
    module: 'Leads',
    subModule: 'UI - CRUD',
    testCaseName: 'Delete lead with confirmation',
    testType: 'UI',
    priority: 'High',
    precondition: 'Lead can be deleted',
    testSteps: '1. Click delete\n2. Confirm deletion\n3. Verify removal',
    expectedResult: 'Lead deleted after confirmation',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'CRUD Operations'
  },
  {
    id: 'TC-LED-025',
    module: 'Leads',
    subModule: 'UI - Display',
    testCaseName: 'Display lead status badge',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Leads with various statuses',
    testSteps: '1. View leads list\n2. Verify status badges\n3. Check color coding',
    expectedResult: 'Status displayed with appropriate colored badge',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'UI Display'
  },
  {
    id: 'TC-LED-026',
    module: 'Leads',
    subModule: 'UI - Display',
    testCaseName: 'Display lead priority indicator',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Leads with different priorities',
    testSteps: '1. View leads\n2. Verify priority badges\n3. Check visual distinction',
    expectedResult: 'Priority shown with distinct colors (red/yellow/green)',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'UI Display'
  },
  {
    id: 'TC-LED-027',
    module: 'Leads',
    subModule: 'UI - Products',
    testCaseName: 'Display lead products summary',
    testType: 'UI',
    priority: 'High',
    precondition: 'Lead with products exists',
    testSteps: '1. View lead with single product\n2. Verify product details shown\n3. View lead with multiple products\n4. Verify summary with "+X more"',
    expectedResult: 'Single product shows details, multiple products show smart summary',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'UI Display'
  },
  {
    id: 'TC-LED-028',
    module: 'Leads',
    subModule: 'UI - Products',
    testCaseName: 'Expand products popover',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Lead with multiple products',
    testSteps: '1. Click "+X more" badge\n2. Verify popover opens\n3. Check all products listed with details',
    expectedResult: 'Popover shows all products with quantities and amounts',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'User Experience'
  },
  {
    id: 'TC-LED-029',
    module: 'Leads',
    subModule: 'UI - Import',
    testCaseName: 'Import leads from file',
    testType: 'UI',
    priority: 'High',
    precondition: 'Valid import file prepared',
    testSteps: '1. Click import\n2. Select file\n3. Map fields\n4. Confirm import\n5. Verify leads created',
    expectedResult: 'Leads imported successfully',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/data-import-modal.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Import Functionality'
  },
  {
    id: 'TC-LED-030',
    module: 'Leads',
    subModule: 'UI - Export',
    testCaseName: 'Export leads to Excel',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Leads exist',
    testSteps: '1. Click export\n2. Verify download\n3. Check data in file',
    expectedResult: 'Excel file downloads with all lead data',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Export Functionality'
  },
  {
    id: 'TC-LED-031',
    module: 'Leads',
    subModule: 'UI - AI Features',
    testCaseName: 'Display AI lead score',
    testType: 'UI',
    priority: 'Low',
    precondition: 'AI lead scoring enabled',
    testSteps: '1. View lead with AI score\n2. Verify score displayed\n3. Check score explanation',
    expectedResult: 'AI lead score shown with visual indicator',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/ai-lead-score.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'AI Features'
  },
  {
    id: 'TC-LED-032',
    module: 'Leads',
    subModule: 'UI - AI Features',
    testCaseName: 'Generate AI email for lead',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Lead exists',
    testSteps: '1. Click AI email generator\n2. Select template\n3. Verify email generated\n4. Edit if needed',
    expectedResult: 'AI generates contextual email for lead',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/ai-email-generator.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'AI Features'
  },
  {
    id: 'TC-LED-033',
    module: 'Leads',
    subModule: 'UI - AI Features',
    testCaseName: 'View AI lead intelligence',
    testType: 'UI',
    priority: 'Low',
    precondition: 'AI intelligence available',
    testSteps: '1. View lead intelligence card\n2. Verify insights shown\n3. Check recommendations',
    expectedResult: 'AI intelligence card shows insights and recommendations',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/ai-lead-intelligence-card.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'AI Features'
  },
  {
    id: 'TC-LED-034',
    module: 'Leads',
    subModule: 'UI - Actions',
    testCaseName: 'Click phone icon to call lead',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Lead has phone number',
    testSteps: '1. Click phone icon\n2. Verify tel: link',
    expectedResult: 'Phone dialer opens',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },
  {
    id: 'TC-LED-035',
    module: 'Leads',
    subModule: 'UI - Actions',
    testCaseName: 'Click email icon to email lead',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Lead has email',
    testSteps: '1. Click email icon\n2. Verify mailto: link',
    expectedResult: 'Email client opens',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },
  {
    id: 'TC-LED-036',
    module: 'Leads',
    subModule: 'UI - Actions',
    testCaseName: 'Click WhatsApp icon to chat',
    testType: 'UI',
    priority: 'Low',
    precondition: 'Lead has WhatsApp',
    testSteps: '1. Click WhatsApp icon\n2. Verify WhatsApp opens',
    expectedResult: 'WhatsApp opens with lead chat',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/leads-content.tsx',
    executionTime: '',
    severity: 'Low',
    category: 'User Actions'
  },
  {
    id: 'TC-LED-037',
    module: 'Leads',
    subModule: 'UI - Validation',
    testCaseName: 'Validate required fields on lead creation',
    testType: 'UI',
    priority: 'High',
    precondition: 'Add lead form open',
    testSteps: '1. Attempt to submit without required fields\n2. Verify validation errors shown\n3. Fill required fields\n4. Verify form submits',
    expectedResult: 'Form validation prevents submission without required fields',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/dynamic-add-lead-content.tsx',
    executionTime: '',
    severity: 'High',
    category: 'Validation'
  },
  {
    id: 'TC-LED-038',
    module: 'Leads',
    subModule: 'UI - Validation',
    testCaseName: 'Validate email format',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Lead form open',
    testSteps: '1. Enter invalid email\n2. Verify validation error\n3. Enter valid email\n4. Verify error clears',
    expectedResult: 'Email validation works correctly',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/dynamic-add-lead-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Validation'
  },
  {
    id: 'TC-LED-039',
    module: 'Leads',
    subModule: 'UI - Validation',
    testCaseName: 'Validate phone number format',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Lead form open',
    testSteps: '1. Enter invalid phone\n2. Verify validation\n3. Enter valid phone\n4. Verify accepted',
    expectedResult: 'Phone validation works correctly',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/dynamic-add-lead-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Validation'
  },
  {
    id: 'TC-LED-040',
    module: 'Leads',
    subModule: 'UI - Validation',
    testCaseName: 'Validate budget is numeric',
    testType: 'UI',
    priority: 'Medium',
    precondition: 'Lead form open',
    testSteps: '1. Enter non-numeric budget\n2. Verify validation error\n3. Enter valid number\n4. Verify accepted',
    expectedResult: 'Budget field only accepts numbers',
    actualResult: '',
    status: 'NOT TESTED',
    automationStatus: 'To Be Automated',
    filePath: 'components/dynamic-add-lead-content.tsx',
    executionTime: '',
    severity: 'Medium',
    category: 'Validation'
  }
];

// Create workbook
const wb = XLSX.utils.book_new();

// Add main test cases sheet
const ws = XLSX.utils.json_to_sheet(testCases);
ws['!cols'] = [
  { wch: 12 },  // ID
  { wch: 15 },  // Module
  { wch: 20 },  // Sub Module
  { wch: 50 },  // Test Case Name
  { wch: 12 },  // Test Type
  { wch: 10 },  // Priority
  { wch: 35 },  // Precondition
  { wch: 70 },  // Test Steps
  { wch: 70 },  // Expected Result
  { wch: 50 },  // Actual Result
  { wch: 12 },  // Status
  { wch: 18 },  // Automation Status
  { wch: 40 },  // File Path
  { wch: 15 },  // Execution Time
  { wch: 12 },  // Severity
  { wch: 20 }   // Category
];
XLSX.utils.book_append_sheet(wb, ws, 'All Test Cases');

// Create summary sheet
const summary = [
  { Metric: 'OVERALL SUMMARY', Value: '' },
  { Metric: 'Total Test Cases', Value: testCases.length },
  { Metric: 'Tested', Value: testCases.filter(tc => tc.status === 'PASS' || tc.status === 'FAIL').length },
  { Metric: 'Not Tested', Value: testCases.filter(tc => tc.status === 'NOT TESTED').length },
  { Metric: 'Pass Rate', Value: '0% (Not yet executed)' },
  { Metric: '', Value: '' },
  { Metric: 'BY MODULE', Value: '' },
  { Metric: '  Accounts', Value: testCases.filter(tc => tc.module === 'Accounts').length },
  { Metric: '  Contacts', Value: testCases.filter(tc => tc.module === 'Contacts').length },
  { Metric: '  Products', Value: testCases.filter(tc => tc.module === 'Products').length },
  { Metric: '  Leads', Value: testCases.filter(tc => tc.module === 'Leads').length },
  { Metric: '', Value: '' },
  { Metric: 'BY PRIORITY', Value: '' },
  { Metric: '  Critical', Value: testCases.filter(tc => tc.priority === 'Critical').length },
  { Metric: '  High', Value: testCases.filter(tc => tc.priority === 'High').length },
  { Metric: '  Medium', Value: testCases.filter(tc => tc.priority === 'Medium').length },
  { Metric: '  Low', Value: testCases.filter(tc => tc.priority === 'Low').length },
  { Metric: '', Value: '' },
  { Metric: 'BY TYPE', Value: '' },
  { Metric: '  API', Value: testCases.filter(tc => tc.testType === 'API').length },
  { Metric: '  UI', Value: testCases.filter(tc => tc.testType === 'UI').length },
  { Metric: '  Integration', Value: testCases.filter(tc => tc.testType === 'Integration').length },
  { Metric: '  Component', Value: testCases.filter(tc => tc.testType === 'Component').length },
  { Metric: '', Value: '' },
  { Metric: 'BY CATEGORY', Value: '' },
  { Metric: '  CRUD Operations', Value: testCases.filter(tc => tc.category === 'CRUD Operations').length },
  { Metric: '  Validation', Value: testCases.filter(tc => tc.category === 'Validation').length },
  { Metric: '  API Testing', Value: testCases.filter(tc => tc.category === 'API Testing').length },
  { Metric: '  UI Rendering', Value: testCases.filter(tc => tc.category === 'UI Rendering').length },
  { Metric: '  Search', Value: testCases.filter(tc => tc.category === 'Search Functionality').length },
  { Metric: '  Filter', Value: testCases.filter(tc => tc.category === 'Filter Functionality').length },
  { Metric: '  Import/Export', Value: testCases.filter(tc => tc.category.includes('Import') || tc.category.includes('Export')).length }
];
const wsSummary = XLSX.utils.json_to_sheet(summary);
wsSummary['!cols'] = [{ wch: 30 }, { wch: 25 }];
XLSX.utils.book_append_sheet(wb, wsSummary, 'Summary');

// Create module-specific sheets
const accountsTests = testCases.filter(tc => tc.module === 'Accounts');
const contactsTests = testCases.filter(tc => tc.module === 'Contacts');
const productsTests = testCases.filter(tc => tc.module === 'Products');
const leadsTests = testCases.filter(tc => tc.module === 'Leads');

const wsAccounts = XLSX.utils.json_to_sheet(accountsTests);
wsAccounts['!cols'] = ws['!cols'];
XLSX.utils.book_append_sheet(wb, wsAccounts, 'Accounts Tests');

const wsContacts = XLSX.utils.json_to_sheet(contactsTests);
wsContacts['!cols'] = ws['!cols'];
XLSX.utils.book_append_sheet(wb, wsContacts, 'Contacts Tests');

const wsProducts = XLSX.utils.json_to_sheet(productsTests);
wsProducts['!cols'] = ws['!cols'];
XLSX.utils.book_append_sheet(wb, wsProducts, 'Products Tests');

const wsLeads = XLSX.utils.json_to_sheet(leadsTests);
wsLeads['!cols'] = ws['!cols'];
XLSX.utils.book_append_sheet(wb, wsLeads, 'Leads Tests');

// Create test execution template
const executionTemplate = [
  {
    TestCaseID: 'Example: TC-ACC-001',
    ExecutionDate: '',
    ExecutedBy: '',
    Status: 'PASS/FAIL/BLOCKED/SKIPPED',
    ActualResult: 'Description of what happened',
    Comments: 'Any additional notes',
    BugID: 'Bug reference if failed',
    RetestRequired: 'Yes/No'
  }
];
const wsExecution = XLSX.utils.json_to_sheet(executionTemplate);
wsExecution['!cols'] = [
  { wch: 15 },
  { wch: 15 },
  { wch: 15 },
  { wch: 15 },
  { wch: 50 },
  { wch: 40 },
  { wch: 15 },
  { wch: 12 }
];
XLSX.utils.book_append_sheet(wb, wsExecution, 'Execution Template');

// Write file
const outputPath = path.join(__dirname, 'CRM_Complete_Test_Cases.xlsx');
XLSX.writeFile(wb, outputPath);

console.log('\n✅ COMPREHENSIVE TEST CASES EXCEL CREATED SUCCESSFULLY!\n');
console.log('═══════════════════════════════════════════════════════');
console.log(`📁 File: ${outputPath}`);
console.log('═══════════════════════════════════════════════════════\n');

console.log('📊 TEST SUITE SUMMARY:');
console.log('─────────────────────────────────────────────────────');
console.log(`Total Test Cases: ${testCases.length}`);
console.log(`  • Accounts Module: ${accountsTests.length} test cases`);
console.log(`  • Contacts Module: ${contactsTests.length} test cases`);
console.log(`  • Products Module: ${productsTests.length} test cases`);
console.log(`  • Leads Module: ${leadsTests.length} test cases`);
console.log('─────────────────────────────────────────────────────\n');

console.log('📑 EXCEL SHEETS CREATED:');
console.log('  1. All Test Cases - Complete test suite');
console.log('  2. Summary - Statistics and breakdown');
console.log('  3. Accounts Tests - Accounts module tests');
console.log('  4. Contacts Tests - Contacts module tests');
console.log('  5. Products Tests - Products module tests');
console.log('  6. Leads Tests - Leads module tests');
console.log('  7. Execution Template - For recording test results\n');

console.log('🎯 COVERAGE AREAS:');
console.log('  ✓ API CRUD Operations (GET, POST, PUT, DELETE)');
console.log('  ✓ Data Validation & Security');
console.log('  ✓ UI Components & Rendering');
console.log('  ✓ Search & Filter Functionality');
console.log('  ✓ Import/Export Features');
console.log('  ✓ Business Logic & Workflows');
console.log('  ✓ User Actions & Navigation');
console.log('  ✓ Error Handling & Edge Cases\n');

console.log('═══════════════════════════════════════════════════════');
console.log('Ready to use! Open the Excel file to view all test cases.');
console.log('═══════════════════════════════════════════════════════\n');
